qnorm(.95)
qnorm(.99)
pt(2.5,df=15,lower.tail = FALSE)
pnorm(2)
pt(2.5,df=15,lower.tail = FALSE)
pnorm(2,lower.tail = FALSE)
mybinC		2.932	2.923		2.923
mybin
pbinom(6,8,.5,lower.tail = FALSE)
pbinom(7,8,.5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z,30,lower.tail = FALSE)
pnorm(30+z,32,lower.tail = FALSE)
pnorm(30+z,32,1,lower.tail = FALSE)
pnorm(30+z,32,2,lower.tail = FALSE)
pnorm(30+z*2,32,2,lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt =
| "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt="one.sided")$power
power.t.test(n = 16, delta = 8 / 4, sd=4, type = "one.sample", alt="one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt="one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt="one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
require(swirl)
swirl()
head(pValues)
sum(pValues < .05)
p.adjust(pValues, method="bonferroni")
sum(p.adjust(pValues, method="bonferroni")<0.05)
sum(p.adjust(pValues, method="BH")<0.05)
tail(trueStatus)
erfgr
ds
sd
table(pValues2 < 0.05, trueStatus)
24/500
table(p.adjust(pValues, method="BH")<0.05, trueStatus)
table(p.adjust(pValues2, method="bonferroni")<0.05, trueStatus)
table(p.adjust(pValues2, method="BH")<0.05, trueStatus)
1/6
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam<-sample(fh,nh*B,replace = TRUE)
resam<-matrix(sam,B,nh)
meds<-apply(resam,1,median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(cdata$count)
range(Cdata$count)
BCounts
BCcounts
group
testStat()
testStat
obs<-testStat(BCcounts,group)
obs
mean(Bdata$count-Cdata$count)
now(group)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
require(swirl)
swirl()
info()
play()
nxt()
fit<- lm(child~parent,galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coefficients[1]
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild<-var()
varChild<-var(lch)
varChild<-var(lhs)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var()
varEst<-var(ols.ic)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor()
cor(gpa_nor,gch_nor)
l_nor<-lm
l_nor<-lm(gch_nor~gga_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(child~parent,galton)
sqrt(sum(fit$residuals^2/(n-2)))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu(galton$child)
mu<-mean(galton$child)
sTot
sTot<-1
sTot <- sum((galton$child-mu)^2)
sRes<-sum(deviance())
sRes<-sum(deviance(galton$child))
sRes<-sum(deviance(fit))
sRes<-(deviance(fit))
sRes<-deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)*2
cor(galton$parent,galton$child)*2
cor(galton$parent,galton$child)^22
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~  parent , galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
require(swirl)
swirl()
lm(.~Fertility, data = swiss)
lm(Fertility ~ ., data = swiss)
all<-lm(Fertility ~ ., data = swiss)
summary(all)
summary(lm(Fertility ~ Agriculture -1, swiss))
summary(lm(Fertility ~ Agriculture , swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec<-(swiss$Examination + swiss$Catholic)
ec<-swiss$Examination + swiss$Catholic
efit<-1
swirl()
efit<-lm(Fertility ~ . + ec, swiss)
all$coef - efit$coef
all$coefficients - efit$coefficients
nrow(InsectSprays)
6
dim(InsectSprays)
head(InsectSprays,15)
A
sA
summary(InsectSprays[,2])
sapply
sapply(InsectSprays,class)
fit(count~ ., InsectSprays)
fit<-lm(count~ ., InsectSprays)
fit$coefficients
fit$coef
summary(fit)$coef
est<-summary(fit)$coef[.1]
est<-summary(fit)$coef[,1]
sA
mean(sA)
mean(sB)
nfit<-lm(count~.-1,swiss)
nfit<-lm(count ~ . - 1,swiss)
nfit<-lm(count~.-1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray, sprayC)
spray2<-relevel(InsectSprays$spray, C)
spray2<-relevel(InsectSprays$spray, 1)
spray2<-relevel(InsectSprays$spray, 'C')
fit2<-lm(count~ ., spray2)
spray2<-relevel(InsectSprays$spray, 'C')
fit2<-lm(count~ spray2,InsectSprays)
spray2
summary(fit2)$coef
mean(sC)
t
(fit$coef[2]-fit$coef[3])/1.6011
a
s
d
dim(hunger)
hunger
dim(hunger)
dim(hunger)[1]
948
names(hunger)
fit<-lm(Year ~ . , hunger)
fit<-lm(Year ~ Numeric , hunger)
fit<-lm(Numeric ~ Year , hunger)
summary(fit)$coef
3
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<-lm(Year ~ . hunger)
lmBoth<-lm(Year ~ ., hunger)
lmBoth<-lm(Year ~ numeric, hunger)
lmBoth<-lm(Year ~ Numeric, hunger)
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year+Sex+Year*Sex,hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
fit
plot(fit, which=1)
fitno<-lm()
fit <- lm(y ~ x, out2)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)
coef(fit)-coef(fitno)
dfbeta(fit)
head(dfbeta(fit))
resno<-1
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=2)
plot(fit, which=1)
plot(fit, which=3)
plot(fit, which=4)
plot(fit, which=6)
plot(fit, which=5)
rgp1()
rgp2()
plot(fit, which=5)
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
deviance(fit3)
d<-deviance(fit3) /43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(lodds)/(1+exp(lodds))
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date'])
)
class(hits[,'date'])
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
mdl <- glm(visits ~ date, poisson, hits)
exp(confint(mdl, 2))
which.max(hits[,'visits'])''
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
log(16)
ln(16)
log(16)/log(10)
1/(1+EXP(-18))
1/(1+exp(-18))
Wxh=-0.1
Whh=0.5
Why=0.25
h_bias=0.4
y_bias=0
x0=18
x1=9
x2=-8
h0=1/(1+exp(-(Wxh*x0+Whh*h_+h_bias)))
h_=0
h0=1/(1+exp(-(Wxh*x0+Whh*h_+h_bias)))
h0
h1=1/(1+exp(-(Wxh*x1+Whh*h0+h_bias)))
h1
h2=1/(1+exp(-(Wxh*x2+Whh*h1+h_bias)))
h2
y0=1/(1+exp(-(Why*h0+y_bias)))
y0
y1=1/(1+exp(-(Why*h1+y_bias)))
y2=1/(1+exp(-(Why*h2+y_bias)))
y1
y2
y0_=(Why*h0+y_bias)
y0_
y1_=(Why*h1+y_bias)
y2_=(Why*h2+y_bias)
y1_
y2_
Wxh=0.5
Whh=-1
Why=-0.7
h_bias=-1
h1=1/(1+exp(-(Wxh*x1+Whh*h0+h_bias)))
h0=1/(1+exp(-(Wxh*x0+Whh*h_+h_bias)))
h1=1/(1+exp(-(Wxh*x1+Whh*h0+h_bias)))
h2=1/(1+exp(-(Wxh*x2+Whh*h1+h_bias)))
y1_=(Why*h1+y_bias)
y1_
Wxh=-0.1
Whh=0.5
Why=0.25
h_bias=0.4
h0=1/(1+exp(-(Wxh*x0+Whh*h_+h_bias)))
h1=1/(1+exp(-(Wxh*x1+Whh*h0+h_bias)))
h2=1/(1+exp(-(Wxh*x2+Whh*h1+h_bias)))
y0_=(Why*h0+y_bias)
y1_=(Why*h1+y_bias)
y2_=(Why*h2+y_bias)
c(y0_,y1_,y2_)
afg=exp(-x)/((exp(-x)+1)^2)
1/2*(t2 - Why*h2)
1/2*(t2 - Why*(1/(1+exp(-z2))))
1/2*(t2 - Why*(1/(1+exp(-z2))^2))
1/2*(t2 - Why*(1/(1+exp(-z2))))^2
t2=-0.2
1/2*(t2 - Why*(1/(1+exp(-z2))))^2
1/2*(t2 - Why*(1/(1+exp(-(Wxh*x2+Whh*h1+h_bias)))))^2
x2
Wxh=0.5
Whh=-1
Why=-0.7
h_bias=-1
y_bia=0
x0=9
x1=4
x2=-2
h0=1/(1+exp(-(Wxh*x0+Whh*h_+h_bias)))
h1=1/(1+exp(-(Wxh*x1+Whh*h0+h_bias)))
h2=1/(1+exp(-(Wxh*x2+Whh*h1+h_bias)))
y0=(Why*h0+y_bias)
y1=(Why*h1+y_bias)
y2=(Why*h2+y_bias)
y1
Wxh=-0.1
Whh=0.5
Why=0.25
h_bias=0.4
y_bias=0
x0=18
x1=9
x2=-8
h0=1/(1+exp(-(Wxh*x0+Whh*h_+h_bias)))
h1=1/(1+exp(-(Wxh*x1+Whh*h0+h_bias)))
h2=1/(1+exp(-(Wxh*x2+Whh*h1+h_bias)))
y0=(Why*h0+y_bias)
y1=(Why*h1+y_bias)
y2=(Why*h2+y_bias)
c(y0,y1,y2)
t1=-0.1
(y1^2-t1*y1)*(Why)*(1)
z1=Wxh*x1+Whh*h0+h_bias
(y1^2-t1*y1)*(Why)*(e^-z1)/(1+e^-z1)^2
350/2.39
0.0784*365
28/12
10000*0.04/100
4*365
0.0098496*365
0.0000082601*1000
0.0000082601*1000*365
9*250
0.0000082601*1000
0.0000082601*1000*365
0.0000082601*1000*365/12
0.0098496*365
0.00000360*1000
0.00000360*1000*365
300*350
300*250
0.0035*365
0.0000082601*1000
0.0000082601*1000*365
0.0000082601*1000*365-0.95
169*260
0.92465753*365
0.92465753*365/2
0.0082601*365
0.00001020*100
0.00001020*100*365
0.1*24
2.4*365
101/100000000
101/100000000*60
101/100000000*60*24
101/100000000*60*24*365
0.6*365
0.008*290
0.008*290*365
1.2*365
1.2*365/100*5000
1.2*365/100*5000/365
1.5*365/100*5000
1.5*365/100*5000/365
0.8*365/100*500
0.09*30*1768
0.09*365
0.09/100*1000
0.09/100*1000*365
0.8/100*1000
0.8/100*1000*365
1.5/100*1000*365
600*0.192
600*0.192*12
(600*0.192+600)*0.192
(600*1.192)*0.192
(600*1.192)*1.192
(600*1.192^12)
library(shiny)
runApp()
require(rchart)
require(rcharts)
require(rCharts)
require(manipulate)
library(manipulate)
installed.packages("manipulate")
library(manipulate)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library("rCharts")
?dTable
??dTable
install.packages("shiny")
library(shiny)
install.packages("googleVis")
install.packages("slidify")
install_github('slidify', 'ramnathv')
library(devtools)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
uninstall("slidify")
library(shiny)
uninstall(lidify)
uninstall(slidify)
500*0.8/100
500*(1.008^70)
500*(1.008^365)
0.008*300
0.06559*300
0.06559*400
getwd()
ls()
dir()
cd(dir()[9])
setwd(dir()[9])
getwd()
